<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Uno 開發日常</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://unoniceday.github.io/"/>
  <updated>2019-08-10T09:51:17.408Z</updated>
  <id>http://unoniceday.github.io/</id>
  
  <author>
    <name>Uno</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>設計模式 - 策略模式</title>
    <link href="http://unoniceday.github.io/2019/08/10/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F---%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://unoniceday.github.io/2019/08/10/設計模式---策略模式/</id>
    <published>2019-08-10T09:20:01.000Z</published>
    <updated>2019-08-10T09:51:17.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><br><p>現在有個情境如下<br><br>你的面前有紅藥水跟毒藥水<br><br>依照你的等級，會有不同效果<br><br>紅藥水： 加 (等級 x 10) 的血量<br><br>毒藥水： 減少 (等級 x 15 )的血量<br><br>那如果用程式寫的話，一般會是這樣<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Main：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Character p1 = <span class="keyword">new</span> Character();</span><br><span class="line">    p1.UseItem(Character.HpItem.RedWater);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">角色：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Character</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hp = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ChacaterLevel = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> HpItem</span><br><span class="line">    &#123;</span><br><span class="line">        RedWater,</span><br><span class="line">        ToxinWater</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UseItem</span><span class="params">(HpItem item)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (item)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> HpItem.RedWater:</span><br><span class="line">                hp += <span class="number">10</span> * ChacaterLevel;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HpItem.ToxinWater:</span><br><span class="line">                hp += <span class="number">-15</span> * ChacaterLevel;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣的確會得到想要的效果，但如果新增藥水的話，又要回到角色這邊來新增使用物品後的效果，違反了開閉原則。</p><p>然後，如果企劃要喊說改紅藥水的數值，變成每等級補50滴，那也是要修改程式碼<br>日後如果又改回每等級10滴，又要跑回來修改程式碼，不管怎麼樣改，都會一直修改原始代碼。<br>因此策略模式就跑出來解決這個問題了！</p><br># 應用策略模式<br><p>先上一個策略模式的圖</p><p><img src="/2019/08/10/設計模式---策略模式/20190810055108084.png" alt><br><br></p><p>紅藥水跟毒藥水，差別在於一個扣血一個損血<br>所以我們可以把他抽出來做成一個介面</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface I_HpItem</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">HpControl</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了這個介面，就可以再往下分為紅藥水跟毒藥水</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedWater</span> :</span> I_HpItem</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">HpControl</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToxinWater</span> :</span> I_HpItem</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">HpControl</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>現在就可以將上面講的藥水公式帶進來了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedWater</span> :</span> I_HpItem</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> level;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedWater</span><span class="params">(<span class="keyword">int</span> _level)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        level = _level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">HpControl</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> * level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToxinWater</span> :</span> I_HpItem</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> level;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToxinWater</span><span class="params">(<span class="keyword">int</span> _level)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        level = _level;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">HpControl</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-15</span> * level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣以後如果要新增藥水的話，也只需要再使用I_HpItem介面做一個藥水，而不用改Character內的程式碼<br>而且這樣的好處也有可以將公式與角色分離，看起來也不會那麼凌亂</p><p>最後，使用起來像這樣</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">        Character p1 = <span class="keyword">new</span> Character();</span><br><span class="line">        </span><br><span class="line">        p1.UseItem(<span class="keyword">new</span> RedWater(p1.ChacaterLevel));</span><br><span class="line">        p1.ChacaterLevel = <span class="number">2</span>;</span><br><span class="line">        p1.UseItem(<span class="keyword">new</span> RedWater(p1.ChacaterLevel));</span><br><span class="line"></span><br><span class="line">        p1.UseItem(<span class="keyword">new</span> ToxinWater(p1.ChacaterLevel));</span><br><span class="line">        p1.UseItem(<span class="keyword">new</span> ToxinWater(p1.ChacaterLevel));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當使用策略模式的時候，如果下次企劃跟你說要修改毒藥水為扣 玩家等級 x 30的血，就不用去修改原始的藥水數值<br>直接新增一個 [  ToxinWater_MinusDouble ]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToxinWater_MinusDouble</span> :</span> I_HpItem</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> level;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToxinWater</span><span class="params">(<span class="keyword">int</span> _level)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        level = _level;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">HpControl</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-30</span> * level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後在Main那邊就多了一個雙倍毒藥水可以用了，下次當企劃又覺得雙倍毒藥有點太難了，改回原始的好了，就可以直接使用原本的毒藥水了，就不用去修改毒藥水的扣血方式了！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">        Character p1 = <span class="keyword">new</span> Character();</span><br><span class="line">        </span><br><span class="line">        p1.ChacaterLevel = <span class="number">2</span>;</span><br><span class="line">        p1.UseItem(<span class="keyword">new</span> ToxinWater_MinusDouble(p1.ChacaterLevel));</span><br><span class="line">        p1.UseItem(<span class="keyword">new</span> ToxinWater(p1.ChacaterLevel));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;現在有個情境如下&lt;br&gt;&lt;br&gt;你的面前有紅藥水跟毒藥水&lt;br&gt;&lt;br&gt;依照你的等級，會有不同效果&lt;br&gt;&lt;br&gt;紅藥水： 加 
      
    
    </summary>
    
      <category term="設計模式" scheme="http://unoniceday.github.io/categories/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="設計模式,策略模式" scheme="http://unoniceday.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>設計模式 - 抽象工廠</title>
    <link href="http://unoniceday.github.io/2019/08/10/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%BB%A0/"/>
    <id>http://unoniceday.github.io/2019/08/10/抽象工廠/</id>
    <published>2019-08-10T07:39:56.000Z</published>
    <updated>2019-08-10T08:59:50.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象工廠"><a href="#抽象工廠" class="headerlink" title="抽象工廠"></a>抽象工廠</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>現在這間工廠不僅僅是生產茶了，他還會賣果汁!<br>這樣原本的茶工廠這名字就不足以容納新的品項了，所以重新命名將它改為飲料工廠<br>從她衍生跑出兩間工廠，一個是coco，一個是tata</p><p>現在跟原本一樣，新增了一個果汁的品項，從果汁衍生出了檸檬汁與橘子汁，這裡跟原本的茶的品項衍生出綠茶跟紅茶的步驟是一樣的。</p><p>先創建一個果汁介面</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> abstract <span class="class"><span class="keyword">class</span> <span class="title">Juice</span> &#123;</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">衍生出檸檬汁、橘子汁</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LemonJuice</span> :</span> Juice &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrangeJuice</span> :</span> Juice &#123; &#125;</span><br></pre></td></tr></table></figure><p>這樣在飲料工廠介面就可以新增點果汁的選項(他原本是TeaFactory)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface DrinkFactory</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Tea <span class="title">OrderTea</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Juice <span class="title">OrderJuice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而從飲料工廠介面衍生出來的兩家飲料店，就可以實作它們的方法<br>這樣兩家飲料店都可以點果汁跟茶了!! </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoCoFactory</span> :</span> DrinkFactory</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Juice <span class="title">OrderJuice</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LemonJuice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tea <span class="title">OrderTea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BlackTea();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaTaFactory</span> :</span> DrinkFactory</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Juice <span class="title">OrderJuice</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrangeJuice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tea <span class="title">OrderTea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GreenTea();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">顧客端：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> :</span> MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">     </span><br><span class="line">        CoCoFactory cocoFactory = <span class="keyword">new</span> CoCoFactory();</span><br><span class="line">        Juice juice1 = cocoFactory.OrderJuice();</span><br><span class="line">        Tea tea1 = cocoFactory.OrderTea();</span><br><span class="line"></span><br><span class="line">        TaTaFactory tataFactory = <span class="keyword">new</span> TaTaFactory();</span><br><span class="line">        Juice juice2 = drinkFactor.OrderJuice();</span><br><span class="line">        Tea tea2 = drinkFactor.OrderTea();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><img src="/2019/08/10/抽象工廠/20190810045947643.png" alt></p><h2 id="增加工廠"><a href="#增加工廠" class="headerlink" title="增加工廠"></a>增加工廠</h2><p>假設我們需要增加一家飲料店<br>那今天如果又多了一家飲料店叫WaWa的來搶生意，就只需要繼承於DrinkFactory然後實作就可以了</p><p><img src="/2019/08/10/抽象工廠/20190810044926274.png" alt></p><h2 id="增加品項"><a href="#增加品項" class="headerlink" title="增加品項"></a>增加品項</h2><p><img src="/2019/08/10/抽象工廠/20190810044944551.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;抽象工廠&quot;&gt;&lt;a href=&quot;#抽象工廠&quot; class=&quot;headerlink&quot; title=&quot;抽象工廠&quot;&gt;&lt;/a&gt;抽象工廠&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h
      
    
    </summary>
    
      <category term="設計模式" scheme="http://unoniceday.github.io/categories/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="設計模式、抽象工廠" scheme="http://unoniceday.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F%E3%80%81%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%BB%A0/"/>
    
  </entry>
  
  <entry>
    <title>設計模式 - 簡單工廠、工廠模式</title>
    <link href="http://unoniceday.github.io/2019/08/10/%E3%80%90%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F%E3%80%91%E7%B0%A1%E5%96%AE%E5%B7%A5%E5%BB%A0%E3%80%81%E5%B7%A5%E5%BB%A0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://unoniceday.github.io/2019/08/10/【設計模式】簡單工廠、工廠模式/</id>
    <published>2019-08-10T06:59:11.000Z</published>
    <updated>2019-08-10T08:26:05.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="簡單工廠"><a href="#簡單工廠" class="headerlink" title="簡單工廠"></a>簡單工廠</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><br>> 如何輕鬆方便的構造對象實例，而不必關心對象實例的細節和複雜的過程呢?<p>上面這句是工廠模式所關注的問題，這樣說有點抽象，用個情境來說：</p><p>現在飲料店來了一個顧客，他想要點紅茶跟綠茶，用UML圖表示，長的像這樣</p><p><img src="/2019/08/10/【設計模式】簡單工廠、工廠模式/20190810031005379.png" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> :</span> MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GreenTea greenTea = <span class="keyword">new</span> GreenTea();</span><br><span class="line">        AddMaterial(); <span class="comment">//加料</span></span><br><span class="line">        Blend(); <span class="comment">//混合</span></span><br><span class="line">        Cup(); <span class="comment">//裝杯</span></span><br><span class="line">        </span><br><span class="line">        BlackTea blackTea = <span class="keyword">new</span> BlackTea();</span><br><span class="line">        AddMaterial(); <span class="comment">//加料</span></span><br><span class="line">        Blend(); <span class="comment">//混合</span></span><br><span class="line">        Cup(); <span class="comment">//裝杯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但這樣顧客就需要知道綠茶的製造流程 ( 加料、混合、裝杯) 這不是很奇怪嗎，為什麼顧客需要知道你加什麼料啦！用程式的角度來說，就是顧客就跟製造的飲料緊密的耦合在一起。<br>        以後越來越多品項的話，在顧客那就需要知道更多製作方法，這樣顧客都可以開店了呢！ 於是為了解決這個問題，就會使用到這次的主題 — 簡單工廠。</p><h2 id="具體實現"><a href="#具體實現" class="headerlink" title="具體實現"></a>具體實現</h2><p><b>具體的創建過程由內部進行，顧客只要把想喝什麼丟進去這個工廠就可以了。</b></p><p>現在將茶抽象出來，因為綠茶跟紅茶都是茶，而且它們都經過三步驟 - 加料、混合、裝杯，所以將他們繼承至茶類</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> abstract <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> &#123;</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackTea</span> :</span> Tea &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenTea</span> :</span> Tea &#123; &#125;</span><br></pre></td></tr></table></figure><p>再來實作一個工廠，裡面有可以讓外部點茶的方法 - OrderTea，傳入想要點的茶的名字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeaFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tea <span class="title">OrderTea</span><span class="params">(<span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="string">"GreenTea"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> GreenTea();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">"BlackTea"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BlackTea();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣在顧客那，就可以使用茶工廠的OrderTea傳入想要點的茶來拿到茶了，與之前不一樣的是<br>這樣顧客不需要知道這杯茶是怎麼做的，只需要知道茶的名字就可以得到想要的茶，實作都會在茶工廠內部實作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> :</span> MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TeaFactory teaFactory = <span class="keyword">new</span> TeaFactory();</span><br><span class="line">        Tea greenTea = teaFactory.OrderTea(<span class="string">"GreenTea"</span>);</span><br><span class="line">        Tea blackTea = teaFactory.OrderTea(<span class="string">"BlackTea"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/10/【設計模式】簡單工廠、工廠模式/20190810032704169.png" alt></p><p>但是!! 簡單工廠並不符合設計模式的開閉原則，每次修改的時候就得在原始代碼上新增對應，這樣一旦東西多了，不止每次修改都有風險出Bug，而且程式碼擠在一起也很難閱讀，因此這時候就需要使用到工廠模式啦</p><h1 id="工廠模式"><a href="#工廠模式" class="headerlink" title="工廠模式"></a>工廠模式</h1><br><blockquote><p>工廠方法模式的實質是「定義一個建立物件的介面，但讓實現這個介面的類來決定實體化哪個類。工廠方法讓類別的實體化推遲到子類別中進行。」</p></blockquote><p>既然要符合開閉原則，那麼就把會修改原代碼的地方抽出來<br>上面看到TeaFactory的OrderTea方法是因為傳入的參數不同，導致每次新增品項都要修改原代碼一次<br>因此，把他抽出來做成介面</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface TeaFactory</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Tea <span class="title">OrderTea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本的BlackTea跟GreenTea不變，額外再做一個GreenTeaFactory、BlackTeaFactory專門賣這兩種茶<br>這樣以後如果多了MikeTea，就再將MikeTea繼承於Tea，然後實作一個MikeTeaFactory繼承TeaFactory就好了，不需要改變到原始的代碼，就符合開閉原則了<br>但這缺點就是，如果新增一個MilkTea就要做一個MilkTeaFactory來對應，這樣每次新增就會跑出兩個類別要實作。</p><p>現在實作上面說的東西：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackTeaFactory</span> :</span> TeaFactory</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tea <span class="title">OrderTea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BlackTea();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenTeaFactory</span> :</span> TeaFactory</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tea <span class="title">OrderTea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GreenTea();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顧客：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> :</span> MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//工廠方法</span></span><br><span class="line">        BlackTeaFactory blackTeaFactory = <span class="keyword">new</span> BlackTeaFactory();</span><br><span class="line">        blackTeaFactory.OrderTea();</span><br><span class="line">        GreenTeaFactory greenTeaFactory = <span class="keyword">new</span> GreenTeaFactory();</span><br><span class="line">        greenTeaFactory.OrderTea();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![](/【設計模式】簡單工廠、工廠模式/20190810033730771.png)<br><p>而且這樣的方法又有一個問題了，那就是一個具體工廠只能創建一個產品<br>像是上面的綠茶工廠，就只會生產綠茶，紅茶工廠只會生產紅茶<br>實際過程中一個工廠往往需要生產多類產品，這時候為了解決這個問題，就需要用到抽象工廠了，見下一篇~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;簡單工廠&quot;&gt;&lt;a href=&quot;#簡單工廠&quot; class=&quot;headerlink&quot; title=&quot;簡單工廠&quot;&gt;&lt;/a&gt;簡單工廠&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h
      
    
    </summary>
    
      <category term="設計模式" scheme="http://unoniceday.github.io/categories/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="設計模式" scheme="http://unoniceday.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Timeline 擴展功能類別之間的關係</title>
    <link href="http://unoniceday.github.io/2019/08/04/Timeline/"/>
    <id>http://unoniceday.github.io/2019/08/04/Timeline/</id>
    <published>2019-08-04T07:09:58.000Z</published>
    <updated>2019-08-04T15:27:48.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用Timeline自訂腳本的時候，有需要繼承幾個類別，一開始接觸的時候還蠻混亂的，之後稍微清楚了所以紀錄一下。<br>最常用到的幾個類別分別為：</p><ul><li>Playable </li><li>TrackAsset </li><li>PlayableAsset </li><li>PlayableBehaviour</li></ul><p>因為他們名字太相像，使用有些API也蠻像的，所以很容易搞不清楚它們分別是拿來幹嘛的。</p><p>以一個Timeline編輯器來說，最主要就分為</p><ol><li>編輯器本身</li><li>軌道</li><li>軌道上的片段</li></ol><p>對照圖就會是<br><img src="/2019/08/04/Timeline/20190804065103222.png" alt></p><h1 id="Playable"><a href="#Playable" class="headerlink" title="Playable"></a>Playable</h1><p>Timeline是基於Playable API去實現的，創建Timeline的時候<br>也可以看到副檔名是.playable，也就是說除了Timeline外，還可以使用這組API去完成各種事情。<br>有興趣的話可以參考 UnityTaiwan的範例。</p><p><a href="https://unitytaiwan.blogspot.com/2017/12/simple-animation.html?fbclid=IwAR1kCohLj5Sgr1AdseZ2_LQDspVoM4PJj1z19d78D-D7IuvoXDJxDDCB4dM" target="_blank" rel="noopener">Simple Animation組件介紹</a></p><p><a href="https://vrast.cn/posts/5df16bd2/" target="_blank" rel="noopener">UNITY3D Playables API 实践(上)</a></p><h1 id="TrackAsset"><a href="#TrackAsset" class="headerlink" title="TrackAsset"></a>TrackAsset</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[TrackColor(<span class="number">241f</span>/<span class="number">255f</span>,<span class="number">249f</span>/<span class="number">255f</span>,<span class="number">99f</span>/<span class="number">255f</span>)]</span><br><span class="line">[TrackBindingType(typeof(Sprite))]</span><br><span class="line">[TrackClipType(typeof(ImageControlAsset))]</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageControlTrack</span> :</span> TrackAsset &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> override Playable <span class="title">CreatePlayable</span><span class="params">(PlayableGraph graph, GameObject go, TimelineClip clip)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> base.CreatePlayable(graph, go, clip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這邊我想完成的是在Track綁定一個Sprite，用Clip控制這個圖片在那些時間點移動，因為程式碼有點量，只節錄一些一般會用到的片段。</p><p>第1行 是宣告這個Track的顏色</p><p>第2行TrackClipType宣告了這個Track綁的Clip，通常會是擴充功能中繼承了PlayableAsset的類別，放進編輯器的話畫面是下方紅圈那樣</p><p>第3行則是這一個Track綁的物件，這邊綁的是隨便一個遊戲物體，在編輯器上位於最前方，見下方藍圈。</p><p><img src="/2019/08/04/Timeline/20190804084733309.png" alt><br><br></p><h1 id="PlayableAsset與PlayableBehaviour"><a href="#PlayableAsset與PlayableBehaviour" class="headerlink" title="PlayableAsset與PlayableBehaviour"></a>PlayableAsset與PlayableBehaviour</h1><br>這兩個會放在一起的原因是，Playable API的核心原則是分離數據與邏輯，這兩個分別代表了一個Clip中的數據與邏輯。<p><b>PlayableAsset是數據部分而PlayableBehaviour則是處理邏輯</b></p><ul><li>PlayableAsset<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageControlAsset</span> :</span> PlayableAsset, ITimelineClipAsset</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    <span class="keyword">private</span> ImageControlBehaviour <span class="keyword">template</span> = <span class="keyword">new</span> ImageControlBehaviour();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ClipCaps clipCaps &#123; get&#123; <span class="keyword">return</span> ClipCaps.None; &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override Playable <span class="title">CreatePlayable</span><span class="params">(PlayableGraph graph, GameObject owner)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ScriptPlayable&lt;ImageControlBehaviour&gt;.Create(graph, <span class="keyword">template</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>可以看到在這個處理數據的類別包含了邏輯的部分，在CreatePlayable的API那創建。<br>值得一提的是，這邊可以使用UnityEngine的東西，像是DestroyImmediate(obj) 在邏輯那個類則不行。</p><ul><li>PlayableBehaviour<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageControlBehaviour</span> :</span> PlayableBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">ProcessFrame</span><span class="params">(Playable playable, FrameData info, object playerData)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Sprite data = (Sprite)playerData;</span><br><span class="line">        base.ProcessFrame(playable, info, playerData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>繼承PlayableBehaviour的類別可以使用很多類似於MonoBehaviour的API<br>但僅僅只是類似而已，還是有許多差別的，這些稍微介紹一下</p><p>ProcessFrame這個東西跟Update很相像，是在Timeline這個片段的時候會進行更新<br>而一開始在ImageControlTrack宣告的綁定物件類別 - Sprite</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TrackBindingType(typeof(Sprite))]</span><br></pre></td></tr></table></figure><p>則可以從這個API內的第三個參數，傳入類行為object內找到，將他轉型就可以拿到你放入的物件，再對它進行處理。<br>另外還可以用很多API，像是有OnBehaviourPlay、OnBehaviourPause、OnGraphStart、OnGraphStop這邊就不多介紹了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageControlBehaviour</span> :</span> PlayableBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">ProcessFrame</span><span class="params">(Playable playable, FrameData info, object playerData)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Sprite data = (Sprite)playerData;</span><br><span class="line">        base.ProcessFrame(playable, info, playerData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">OnBehaviourPlay</span><span class="params">(Playable playable, FrameData info)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.OnBehaviourPlay(playable, info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">OnBehaviourPause</span><span class="params">(Playable playable, FrameData info)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.OnBehaviourPause(playable, info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">OnPlayableCreate</span><span class="params">(Playable playable)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.OnPlayableCreate(playable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">OnGraphStart</span><span class="params">(Playable playable)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.OnGraphStart(playable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">OnGraphStop</span><span class="params">(Playable playable)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.OnGraphStop(playable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用Timeline自訂腳本的時候，有需要繼承幾個類別，一開始接觸的時候還蠻混亂的，之後稍微清楚了所以紀錄一下。&lt;br&gt;最常用到的幾個類別
      
    
    </summary>
    
      <category term="Unity" scheme="http://unoniceday.github.io/categories/Unity/"/>
    
    
      <category term="Tineline、Unity" scheme="http://unoniceday.github.io/tags/Tineline%E3%80%81Unity/"/>
    
  </entry>
  
  <entry>
    <title>Timeline 快速認識</title>
    <link href="http://unoniceday.github.io/2019/08/03/Unity-Timeline-%E5%BF%AB%E9%80%9F%E8%AA%8D%E8%AD%98/"/>
    <id>http://unoniceday.github.io/2019/08/03/Unity-Timeline-快速認識/</id>
    <published>2019-08-03T03:25:08.000Z</published>
    <updated>2019-08-04T15:33:32.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>Timeline是Unity 在2017.1版本中推出的<b>敘事工具</b>，可以在時間軸內編排遊戲內各種東西，像是遊戲物件、聲音、光照、鏡頭，做成遊戲動畫、電影。像是在遊戲途中，我們常會遇到在某一個時間點，需要插入一段劇情動畫，而timeline就可以用來解決這類的事情。</p><p><a href="https://www.youtube.com/watch?v=G_uBFM3YUF4" target="_blank" rel="noopener">Intro to Unity Timeline</a></p><h1 id="簡單範例"><a href="#簡單範例" class="headerlink" title="簡單範例"></a>簡單範例</h1><ol><li>創建一個Timeline<ul><li>首先打開Timeline視窗 [ Window -&gt; Timeline ] </li><li>創建一個空物件</li><li>點擊空物件，在Timeline視窗上按Create</li></ul></li></ol><p><img src="/2019/08/03/Unity-Timeline-快速認識/20190803020026895.png" alt></p><ol start="2"><li><p>移除不必要的組件<br>由於指定了GameObject來創建這個Timeline，本身會自動添加Animator組件，但這個範例不必操作這個物體，所以把Gameobject上多餘的Animator移除掉，Timeline上的也是</p></li><li><p>加入要操控的物體<br>創建兩個Cube，將它拖進Timeline視窗後會出現選項<br><img src="/2019/08/03/Unity-Timeline-快速認識/20190803021734682.png" alt></p></li></ol><ul><li>ActivationTrack ：操作物體的Active</li><li>AnimationTrack ：物體的動畫軌道，可以錄製動畫</li><li>AudioTrack ：音頻的軌道</li></ul><p>這邊就選Animation Track來做一段動畫。<br><br><br><br><br><img src="/2019/08/03/Unity-Timeline-快速認識/20190803022255226.png" alt><br>將物體擺上去後，會發現有個紅點可以點，它就是拿來錄製這個物體的動畫的按鈕，點下去後會發現右邊軌道上有個Recording，就代表開始錄製了，這邊就跟在Animation視窗上製作動畫一樣，可以操控它的位置、旋轉、…之類的東西。<br><br><br><br><br><b>如果不想用這個地方編輯它的動畫，也可以直接在 Recording模式中直接點擊兩下，它就會跳出Animation的視窗了</b><br><img src="/2019/08/03/Unity-Timeline-快速認識/20190803023110789.png" alt><br><br><br><br><br>然後另外一個物件同樣編輯一下動畫，就可以看見兩個物體一起動作的樣子了</p><iframe width="560" height="315" src="https://www.youtube.com/embed/kmRKZ4xzOgQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h1&gt;&lt;p&gt;Timeline是Unity 在2017.1版本中推出的&lt;b&gt;敘事工具&lt;/b&gt;，可以在時間軸內編排遊戲內各種東西，像是遊戲物件、聲音、光照、
      
    
    </summary>
    
      <category term="Unity" scheme="http://unoniceday.github.io/categories/Unity/"/>
    
    
      <category term="Timeline" scheme="http://unoniceday.github.io/tags/Timeline/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown語法測試</title>
    <link href="http://unoniceday.github.io/2019/07/31/MarkDown%E8%AA%9E%E6%B3%95%E6%B8%AC%E8%A9%A6/"/>
    <id>http://unoniceday.github.io/2019/07/31/MarkDown語法測試/</id>
    <published>2019-07-31T14:02:06.000Z</published>
    <updated>2019-07-31T14:43:43.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h1><h2 id="再來一個標題"><a href="#再來一個標題" class="headerlink" title="再來一個標題"></a>再來一個標題</h2><h3 id="還來一個標題"><a href="#還來一個標題" class="headerlink" title="還來一個標題"></a>還來一個標題</h3><h4 id="四個井字的標題"><a href="#四個井字的標題" class="headerlink" title="四個井字的標題"></a>四個井字的標題</h4><h5 id="五個"><a href="#五個" class="headerlink" title="五個"></a>五個</h5><h6 id="六個"><a href="#六個" class="headerlink" title="六個"></a>六個</h6><ul><li>清單</li><li>第二個</li><li>三</li><li>自動排序</li></ul><ul><li>+字也可以</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(css)</span><br><span class="line">    else</span><br><span class="line"> XD</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分隔線</p><hr><hr><p>連結</p><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><hr><p><strong>雙底線</strong> <em>單星號</em>    <strong><em>三星號</em></strong></p><hr><p><a href="https://wikipedia.org" target="_blank" rel="noopener">文字超連結</a></p><h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><ol><li>Write markdown text in this textarea.</li><li>Click ‘HTML Preview’ button.</li></ol><p>換行小於<br>br/大於</p><blockquote><p>區塊語言<br><br>前面加一個大於</p></blockquote><p>Markdown支援在下面這些符號前面加上反斜線來幫助插入普通的符號：</p><p>\   反斜線</p><p>`   反引號</p><p>*   星號</p><p>_   底線</p><p>{}  大括號</p><p>[]  方括號</p><p>()  括號</p><p>#   井字號</p><p>+   加號</p><p>-   減號</p><p>.   英文句點</p><p>!   驚嘆號</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;標題&quot;&gt;&lt;a href=&quot;#標題&quot; class=&quot;headerlink&quot; title=&quot;標題&quot;&gt;&lt;/a&gt;標題&lt;/h1&gt;&lt;h2 id=&quot;再來一個標題&quot;&gt;&lt;a href=&quot;#再來一個標題&quot; class=&quot;headerlink&quot; title=&quot;再來一個標題&quot;&gt;&lt;/a&gt;再
      
    
    </summary>
    
      <category term="Test" scheme="http://unoniceday.github.io/categories/Test/"/>
    
    
      <category term="markdown" scheme="http://unoniceday.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
