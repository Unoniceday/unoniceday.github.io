<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Uno 開發日常</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://unoniceday.github.io/"/>
  <updated>2019-08-04T14:12:43.700Z</updated>
  <id>http://unoniceday.github.io/</id>
  
  <author>
    <name>Uno</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Timeline 擴展功能類別之間的關係</title>
    <link href="http://unoniceday.github.io/2019/08/04/Timeline%E6%93%B4%E5%B1%95%E5%8A%9F%E8%83%BD%E7%9A%84%E9%A1%9E%E5%88%A5%E4%B9%8B%E9%96%93%E7%9A%84%E9%97%9C%E4%BF%82/"/>
    <id>http://unoniceday.github.io/2019/08/04/Timeline擴展功能的類別之間的關係/</id>
    <published>2019-08-04T07:09:58.000Z</published>
    <updated>2019-08-04T14:12:43.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用Timeline自訂腳本的時候，有需要繼承幾個類別，一開始接觸的時候還蠻混亂的，之後稍微清楚了所以紀錄一下。<br>最常用到的幾個類別分別為：</p><ul><li>Playable </li><li>TrackAsset </li><li>PlayableAsset </li><li>PlayableBehaviour</li></ul><p>因為他們名字太相像，使用有些API也蠻像的，所以很容易搞不清楚它們分別是拿來幹嘛的。</p><p>以一個Timeline編輯器來說，最主要就分為</p><ol><li>編輯器本身</li><li>軌道</li><li>軌道上的片段</li></ol><p>對照圖就會是<br><img src="/Timeline/20190804065103222.png" alt></p><h1 id="Playable"><a href="#Playable" class="headerlink" title="Playable"></a>Playable</h1><p>Timeline是基於Playable API去實現的，創建Timeline的時候<br>也可以看到副檔名是.playable，也就是說除了Timeline外，還可以使用這組API去完成各種事情。<br>有興趣的話可以參考 UnityTaiwan的範例。</p><p><a href="https://unitytaiwan.blogspot.com/2017/12/simple-animation.html?fbclid=IwAR1kCohLj5Sgr1AdseZ2_LQDspVoM4PJj1z19d78D-D7IuvoXDJxDDCB4dM" target="_blank" rel="noopener">Simple Animation組件介紹</a></p><p><a href="https://vrast.cn/posts/5df16bd2/" target="_blank" rel="noopener">UNITY3D Playables API 实践(上)</a></p><h1 id="TrackAsset"><a href="#TrackAsset" class="headerlink" title="TrackAsset"></a>TrackAsset</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[TrackColor(<span class="number">241f</span>/<span class="number">255f</span>,<span class="number">249f</span>/<span class="number">255f</span>,<span class="number">99f</span>/<span class="number">255f</span>)]</span><br><span class="line">[TrackBindingType(typeof(Sprite))]</span><br><span class="line">[TrackClipType(typeof(ImageControlAsset))]</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageControlTrack</span> :</span> TrackAsset &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> override Playable <span class="title">CreatePlayable</span><span class="params">(PlayableGraph graph, GameObject go, TimelineClip clip)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> base.CreatePlayable(graph, go, clip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這邊我想完成的是在Track綁定一個Sprite，用Clip控制這個圖片在那些時間點移動，因為程式碼有點量，只節錄一些一般會用到的片段。</p><p>第1行 是宣告這個Track的顏色</p><p>第2行TrackClipType宣告了這個Track綁的Clip，通常會是擴充功能中繼承了PlayableAsset的類別，放進編輯器的話畫面是下方紅圈那樣</p><p>第3行則是這一個Track綁的物件，這邊綁的是隨便一個遊戲物體，在編輯器上位於最前方，見下方藍圈。</p><p><img src="/Timeline/20190804084733309.png" alt><br><br></p><h1 id="PlayableAsset與PlayableBehaviour"><a href="#PlayableAsset與PlayableBehaviour" class="headerlink" title="PlayableAsset與PlayableBehaviour"></a>PlayableAsset與PlayableBehaviour</h1><br>這兩個會放在一起的原因是，Playable API的核心原則是分離數據與邏輯，這兩個分別代表了一個Clip中的數據與邏輯。<p><b>PlayableAsset是數據部分而PlayableBehaviour則是處理邏輯</b></p><ul><li>PlayableAsset<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageControlAsset</span> :</span> PlayableAsset, ITimelineClipAsset</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    <span class="keyword">private</span> ImageControlBehaviour <span class="keyword">template</span> = <span class="keyword">new</span> ImageControlBehaviour();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ClipCaps clipCaps &#123; get&#123; <span class="keyword">return</span> ClipCaps.None; &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override Playable <span class="title">CreatePlayable</span><span class="params">(PlayableGraph graph, GameObject owner)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ScriptPlayable&lt;ImageControlBehaviour&gt;.Create(graph, <span class="keyword">template</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>可以看到在這個處理數據的類別包含了邏輯的部分，在CreatePlayable的API那創建。<br>值得一提的是，這邊可以使用UnityEngine的東西，像是DestroyImmediate(obj) 在邏輯那個類則不行。</p><ul><li>PlayableBehaviour<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageControlBehaviour</span> :</span> PlayableBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">ProcessFrame</span><span class="params">(Playable playable, FrameData info, object playerData)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Sprite data = (Sprite)playerData;</span><br><span class="line">        base.ProcessFrame(playable, info, playerData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>繼承PlayableBehaviour的類別可以使用很多類似於MonoBehaviour的API<br>但僅僅只是類似而已，還是有許多差別的，這些稍微介紹一下</p><p>ProcessFrame這個東西跟Update很相像，是在Timeline這個片段的時候會進行更新<br>而一開始在ImageControlTrack宣告的綁定物件類別 - Sprite</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TrackBindingType(typeof(Sprite))]</span><br></pre></td></tr></table></figure><p>則可以從這個API內的第三個參數，傳入類行為object內找到，將他轉型就可以拿到你放入的物件，再對它進行處理。<br>另外還可以用很多API，像是有OnBehaviourPlay、OnBehaviourPause、OnGraphStart、OnGraphStop這邊就不多介紹了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageControlBehaviour</span> :</span> PlayableBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">ProcessFrame</span><span class="params">(Playable playable, FrameData info, object playerData)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Sprite data = (Sprite)playerData;</span><br><span class="line">        base.ProcessFrame(playable, info, playerData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">OnBehaviourPlay</span><span class="params">(Playable playable, FrameData info)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.OnBehaviourPlay(playable, info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">OnBehaviourPause</span><span class="params">(Playable playable, FrameData info)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.OnBehaviourPause(playable, info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">OnPlayableCreate</span><span class="params">(Playable playable)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.OnPlayableCreate(playable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">OnGraphStart</span><span class="params">(Playable playable)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.OnGraphStart(playable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">OnGraphStop</span><span class="params">(Playable playable)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.OnGraphStop(playable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用Timeline自訂腳本的時候，有需要繼承幾個類別，一開始接觸的時候還蠻混亂的，之後稍微清楚了所以紀錄一下。&lt;br&gt;最常用到的幾個類別
      
    
    </summary>
    
      <category term="Unity" scheme="http://unoniceday.github.io/categories/Unity/"/>
    
    
      <category term="Tineline、Unity" scheme="http://unoniceday.github.io/tags/Tineline%E3%80%81Unity/"/>
    
  </entry>
  
  <entry>
    <title>Timeline 快速認識</title>
    <link href="http://unoniceday.github.io/2019/08/03/Unity-Timeline-%E5%BF%AB%E9%80%9F%E8%AA%8D%E8%AD%98/"/>
    <id>http://unoniceday.github.io/2019/08/03/Unity-Timeline-快速認識/</id>
    <published>2019-08-03T03:25:08.000Z</published>
    <updated>2019-08-04T14:13:08.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>Timeline是Unity 在2017.1版本中推出的<b>敘事工具</b>，可以在時間軸內編排遊戲內各種東西，像是遊戲物件、聲音、光照、鏡頭，做成遊戲動畫、電影。像是在遊戲途中，我們常會遇到在某一個時間點，需要插入一段劇情動畫，而timeline就可以用來解決這類的事情。</p><p><a href="https://www.youtube.com/watch?v=G_uBFM3YUF4" target="_blank" rel="noopener">Intro to Unity Timeline</a></p><h1 id="簡單範例"><a href="#簡單範例" class="headerlink" title="簡單範例"></a>簡單範例</h1><h5 id="1-創建一個Timeline"><a href="#1-創建一個Timeline" class="headerlink" title="1.創建一個Timeline"></a>1.創建一個Timeline</h5><ul><li>首先打開Timeline視窗 [ Window -&gt; Timeline ] </li><li>創建一個空物件</li><li>點擊空物件，在Timeline視窗上按Create</li></ul><p><img src="/Unity-Timeline-%E5%9F%BA%E7%A4%8E%E8%AA%8D%E8%AD%98/20190803020026895.png" alt></p><h5 id="2-移除不必要的組件"><a href="#2-移除不必要的組件" class="headerlink" title="2.移除不必要的組件"></a>2.移除不必要的組件</h5><p>由於指定了GameObject來創建這個Timeline，本身會自動添加Animator組件，但這個範例不必操作這個物體，所以把Gameobject上多餘的Animator移除掉，Timeline上的也是</p><h5 id="3-加入要操控的物體"><a href="#3-加入要操控的物體" class="headerlink" title="3. 加入要操控的物體"></a>3. 加入要操控的物體</h5><p>創建兩個Cube，將它拖進Timeline視窗後會出現選項<br><img src="/Unity-Timeline-%E5%9F%BA%E7%A4%8E%E8%AA%8D%E8%AD%98/20190803021734682.png" alt></p><ul><li>ActivationTrack ：操作物體的Active</li><li>AnimationTrack ：物體的動畫軌道，可以錄製動畫</li><li>AudioTrack ：音頻的軌道</li></ul><p>這邊就選Animation Track來做一段動畫。<br><br><br><br><br><img src="/Unity-Timeline-%E5%9F%BA%E7%A4%8E%E8%AA%8D%E8%AD%98/20190803022255226.png" alt><br>將物體擺上去後，會發現有個紅點可以點，它就是拿來錄製這個物體的動畫的按鈕，點下去後會發現右邊軌道上有個Recording，就代表開始錄製了，這邊就跟在Animation視窗上製作動畫一樣，可以操控它的位置、旋轉、…之類的東西。<br><br><br><br><br><b>如果不想用這個地方編輯它的動畫，也可以直接在 Recording模式中直接點擊兩下，它就會跳出Animation的視窗了</b><br><img src="/Unity-Timeline-%E5%9F%BA%E7%A4%8E%E8%AA%8D%E8%AD%98/20190803023110789.png" alt><br><br><br><br><br>然後另外一個物件同樣編輯一下動畫，就可以看見兩個物體一起動作的樣子了</p><iframe width="560" height="315" src="https://www.youtube.com/embed/kmRKZ4xzOgQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h1&gt;&lt;p&gt;Timeline是Unity 在2017.1版本中推出的&lt;b&gt;敘事工具&lt;/b&gt;，可以在時間軸內編排遊戲內各種東西，像是遊戲物件、聲音、光照、
      
    
    </summary>
    
      <category term="Unity" scheme="http://unoniceday.github.io/categories/Unity/"/>
    
    
      <category term="Timeline" scheme="http://unoniceday.github.io/tags/Timeline/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown語法測試</title>
    <link href="http://unoniceday.github.io/2019/07/31/MarkDown%E8%AA%9E%E6%B3%95%E6%B8%AC%E8%A9%A6/"/>
    <id>http://unoniceday.github.io/2019/07/31/MarkDown語法測試/</id>
    <published>2019-07-31T14:02:06.000Z</published>
    <updated>2019-07-31T14:43:43.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h1><h2 id="再來一個標題"><a href="#再來一個標題" class="headerlink" title="再來一個標題"></a>再來一個標題</h2><h3 id="還來一個標題"><a href="#還來一個標題" class="headerlink" title="還來一個標題"></a>還來一個標題</h3><h4 id="四個井字的標題"><a href="#四個井字的標題" class="headerlink" title="四個井字的標題"></a>四個井字的標題</h4><h5 id="五個"><a href="#五個" class="headerlink" title="五個"></a>五個</h5><h6 id="六個"><a href="#六個" class="headerlink" title="六個"></a>六個</h6><ul><li>清單</li><li>第二個</li><li>三</li><li>自動排序</li></ul><ul><li>+字也可以</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(css)</span><br><span class="line">    else</span><br><span class="line"> XD</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分隔線</p><hr><hr><p>連結</p><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><hr><p><strong>雙底線</strong> <em>單星號</em>    <strong><em>三星號</em></strong></p><hr><p><a href="https://wikipedia.org" target="_blank" rel="noopener">文字超連結</a></p><h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><ol><li>Write markdown text in this textarea.</li><li>Click ‘HTML Preview’ button.</li></ol><p>換行小於<br>br/大於</p><blockquote><p>區塊語言<br><br>前面加一個大於</p></blockquote><p>Markdown支援在下面這些符號前面加上反斜線來幫助插入普通的符號：</p><p>\   反斜線</p><p>`   反引號</p><p>*   星號</p><p>_   底線</p><p>{}  大括號</p><p>[]  方括號</p><p>()  括號</p><p>#   井字號</p><p>+   加號</p><p>-   減號</p><p>.   英文句點</p><p>!   驚嘆號</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;標題&quot;&gt;&lt;a href=&quot;#標題&quot; class=&quot;headerlink&quot; title=&quot;標題&quot;&gt;&lt;/a&gt;標題&lt;/h1&gt;&lt;h2 id=&quot;再來一個標題&quot;&gt;&lt;a href=&quot;#再來一個標題&quot; class=&quot;headerlink&quot; title=&quot;再來一個標題&quot;&gt;&lt;/a&gt;再
      
    
    </summary>
    
      <category term="Test" scheme="http://unoniceday.github.io/categories/Test/"/>
    
    
      <category term="markdown" scheme="http://unoniceday.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
